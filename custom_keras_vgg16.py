# -*- coding: utf-8 -*-
"""Custom Keras VGG16.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MXJbqHfx743gG9d2oyzKbk6Y14_QOhcl

##**COSTUM VGG16**
original link --- 
https://github.com/keras-team/keras-applications/blob/master/keras_applications/vgg16.py
"""

!apt-get install -y -qq software-properties-common python-software-properties module-init-tools
!add-apt-repository -y ppa:alessandro-strada/ppa 2>&1 > /dev/null
!apt-get update -qq 2>&1 > /dev/null
!apt-get -y install -qq google-drive-ocamlfuse fuse
from google.colab import auth
auth.authenticate_user()
from oauth2client.client import GoogleCredentials
creds = GoogleCredentials.get_application_default()
import getpass
!google-drive-ocamlfuse -headless -id={creds.client_id} -secret={creds.client_secret} < /dev/null 2>&1 | grep URL
vcode = getpass.getpass()
!echo {vcode} | google-drive-ocamlfuse -headless -id={creds.client_id} -secret={creds.client_secret}

!mkdir -p drive
!google-drive-ocamlfuse drive

cd drive

ls

cd database

ls

import numpy as np

X = np.load('normalized_bath1.npy')
Y = np.load('Y_coco.npy')

Y = Y * 91 * 2
print(X.shape)
print(Y.shape)

from keras.applications.vgg16 import VGG16

"""#Additional definations

##definig custom error function
"""

import keras
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import six
from keras import backend as K
from keras.utils.generic_utils import deserialize_keras_object
from keras.utils.generic_utils import serialize_keras_object


def custom_error(y_true, y_pred):
    return K.mean(K.square(K.square(y_pred) - K.square(y_true)), axis=-1)

"""#some more additional definations

#keras VGG16
"""

# import modules
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D
from keras.layers import Activation, Dropout, Flatten, Dense
from keras.layers.normalization import BatchNormalization
from keras import optimizers
import keras

x = Sequential()

# Block 1
x.add(Conv2D(64, (3, 3),activation='relu',padding='same',input_shape=(300,300,3)))
x.add(Conv2D(64, (3, 3),activation='relu',padding='same'))
x.add(MaxPooling2D((2, 2), strides=(2, 2), name='block1_pool'))

# Block 2
x.add(Conv2D(128, (3, 3),activation='relu',padding='same'))
x.add(Conv2D(128, (3, 3),activation='relu',padding='same',name='block2_conv2'))
x.add(MaxPooling2D((2, 2), strides=(2, 2), name='block2_pool'))

# Block 3
x.add(Conv2D(256, (3, 3),activation='relu',padding='same'))

x.add(Conv2D(256, (3, 3),activation='relu',padding='same'))

x.add(Conv2D(256, (3, 3),activation='relu',padding='same'))

x.add(MaxPooling2D((2, 2), strides=(2, 2), name='block3_pool'))

# Block 4
x.add(Conv2D(512, (3, 3),activation='relu',padding='same'))

x.add(Conv2D(512, (3, 3),activation='relu',padding='same'))

x.add(Conv2D(512, (3, 3),activation='relu',padding='same'))

x.add(MaxPooling2D((2, 2), strides=(2, 2), name='block4_pool'))

# Block 5
x.add(Conv2D(512, (3, 3),activation='relu',padding='same'))

x.add(Conv2D(512, (3, 3),activation='relu',padding='same'))

x.add(Conv2D(512, (3, 3),activation='relu',padding='same'))
x.add(MaxPooling2D((2, 2), strides=(2, 2), name='block5_pool'))

# Classification block
x.add(Flatten())

x.add(Dense(4096, activation='relu'))
x.add(Dense(4096, activation='relu'))
x.add(Dense(91, activation='softmax', name='predictions'))

sgd = optimizers.SGD(lr=0.001, decay=1e-6, momentum=0.9, nesterov=True)
nadam = optimizers.Nadam(lr=0.02, beta_1=0.9, beta_2=0.999, epsilon=None, schedule_decay=0.004)
x.compile(loss=custom_error,
              optimizer=nadam,
              metrics=['accuracy'])

x.fit(X, Y[10000:20000],
          epochs=5,
          batch_size=20)

