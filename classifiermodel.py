# -*- coding: utf-8 -*-
"""ClassifierModel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1emvgqHbFuHFClugb0SthFd7imQxKRc0-
"""

!apt-get install -y -qq software-properties-common python-software-properties module-init-tools
!add-apt-repository -y ppa:alessandro-strada/ppa 2>&1 > /dev/null
!apt-get update -qq 2>&1 > /dev/null
!apt-get -y install -qq google-drive-ocamlfuse fuse
from google.colab import auth
auth.authenticate_user()
from oauth2client.client import GoogleCredentials
creds = GoogleCredentials.get_application_default()
import getpass
!google-drive-ocamlfuse -headless -id={creds.client_id} -secret={creds.client_secret} < /dev/null 2>&1 | grep URL
vcode = getpass.getpass()
!echo {vcode} | google-drive-ocamlfuse -headless -id={creds.client_id} -secret={creds.client_secret}

!mkdir -p drive
!google-drive-ocamlfuse drive

cd ..

ls

cd drive

ls

cd database

ls

import numpy as np

X = np.load('normalized_bath1.npy')
Y = np.load('Y_coco.npy')

Y = Y * 91 * 2
print(X.shape)
print(Y.shape)

# import modules
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D
from keras.layers import Activation, Dropout, Flatten, Dense
from keras.layers.normalization import BatchNormalization
from keras import optimizers

model = Sequential()

model.add(Conv2D(64, (1, 1), input_shape=(300,300,3)))
model.add(BatchNormalization())
model.add(Activation('relu'))


model.add(Conv2D(64, (1, 1)))
model.add(Activation('relu'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2)))


model.add(Conv2D(64,(2, 2)))
model.add(BatchNormalization())
model.add(Activation('relu'))

model.add(Conv2D(64,(1, 1)))
model.add(BatchNormalization())
model.add(Activation('relu'))


model.add(Conv2D(64,(2, 2)))
model.add(BatchNormalization())
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))


model.add(Conv2D(64,(2, 2)))
model.add(BatchNormalization())
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))


model.add(Conv2D(64,(2, 2)))
model.add(BatchNormalization())
model.add(Activation('relu'))

model.add(Conv2D(64, (2, 2)))
model.add(BatchNormalization())
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Flatten())
# Fully connected layer


model.add(Dense(200))
model.add(Activation('relu'))
BatchNormalization()
model.add(Dropout(0.2))
model.add(Dense(91))

model.add(Activation('softmax'))

sgd = optimizers.SGD(lr=0.01, clipvalue=0.5)
model.compile(loss='mean_squared_error',
              optimizer=sgd,
              metrics=['accuracy'])

model.fit(X, Y[10000:20000],
          epochs=5,
          batch_size=20)

#score = model.evaluate(X_test, Y_test, batch_size=32)
print("--------------------------------------------")
print("Score is",score)

# save weights
#model.save_weights('keras_digit_classifier.h5')

res = model.predict(X[0:1])

res

model.save_weights('keras_coco_classifier.h5')

model.save('classifierModel.h5')

ls

################
#TEST THE MODEL#
################

import cv2
im = cv2.imread('car.jpg')
im = cv2.resize(im,(300,300))
X_ = im.reshape(1,300, 300,3)
predictions = model.predict(X_)
# print(predictions)

predictions

