# -*- coding: utf-8 -*-
"""charClassifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NvdmucdTryYKVEL4jamH1RGRRcBL4kAo
"""

!apt-get install -y -qq software-properties-common python-software-properties module-init-tools
!add-apt-repository -y ppa:alessandro-strada/ppa 2>&1 > /dev/null
!apt-get update -qq 2>&1 > /dev/null
!apt-get -y install -qq google-drive-ocamlfuse fuse
from google.colab import auth
auth.authenticate_user()
from oauth2client.client import GoogleCredentials
creds = GoogleCredentials.get_application_default()
import getpass
!google-drive-ocamlfuse -headless -id={creds.client_id} -secret={creds.client_secret} < /dev/null 2>&1 | grep URL
vcode = getpass.getpass()
!echo {vcode} | google-drive-ocamlfuse -headless -id={creds.client_id} -secret={creds.client_secret}

!mkdir -p drive
!google-drive-ocamlfuse drive

ls

cd drive

# import modules
import glob
import numpy as np
import cv2

X_data = np.load('X_data.npy')
Y_data = np.load('Y_data.npy')

print(X_data.shape)
print(Y_data.shape)

# Test train split
# training data
X_train = X_data[0:50000]
Y_train = Y_data[0:50000]

# test data
X_test = X_data[50000:62992]
Y_test = Y_data[50000:62992]

per = np.random.permutation(50000)
X_train = X_train[per]
Y_train = Y_train[per]
y = np.zeros(Y_train.shape)

# import modules
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D
from keras.layers import Activation, Dropout, Flatten, Dense 
from keras.layers.normalization import BatchNormalization
from keras import optimizers,losses
import keras

model = Sequential()

model.add(Conv2D(100, (3, 3), activation='relu',input_shape=(50,50,3)))

model.add(MaxPooling2D(pool_size=(2,2)))

model.add(BatchNormalization())

model.add(Conv2D(200, (3, 3),activation='relu'))


model.add(MaxPooling2D(pool_size=(2,2)))


model.add(Flatten())
# Fully connected layer


model.add(Dense(128,activation='relu'))


#model.add(Dropout(0.2))
model.add(BatchNormalization())

model.add(Dense(62,activation='softmax'))

sgd = optimizers.SGD(lr=0.01, clipvalue=0.5)
#adm = keras.optimizers.Adam(lr=0.001, beta_1=0.9, beta_2=0.999, epsilon=None, decay=0.0, amsgrad=False)
model.compile(loss='mean_squared_error',
              optimizer=sgd,
              metrics=['accuracy'])

model.fit(X_train,Y_train,
          epochs=5,
          batch_size=10,
         )

# score = model.evaluate(X_test, Y_test, batch_size=32)
# print("--------------------------------------------")
# print("Score is",score)

# save weights
model.save_weights('keras_digit_classifier.h5')

model.evaluate(X_test,Y_test)

!ls

