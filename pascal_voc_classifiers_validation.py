# -*- coding: utf-8 -*-
"""PASCAL VOC CLASSIFIERS Validation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CqmCamnTzTEwvPU9IJRoOufu6kUWl7Pd
"""

!apt-get install -y -qq software-properties-common python-software-properties module-init-tools
!add-apt-repository -y ppa:alessandro-strada/ppa 2>&1 > /dev/null
!apt-get update -qq 2>&1 > /dev/null
!apt-get -y install -qq google-drive-ocamlfuse fuse
from google.colab import auth
auth.authenticate_user()
from oauth2client.client import GoogleCredentials
creds = GoogleCredentials.get_application_default()
import getpass
!google-drive-ocamlfuse -headless -id={creds.client_id} -secret={creds.client_secret} < /dev/null 2>&1 | grep URL
vcode = getpass.getpass()
!echo {vcode} | google-drive-ocamlfuse -headless -id={creds.client_id} -secret={creds.client_secret}

cd drive

ls

cd pascal_data

ls

import numpy as np

# import modules
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D
from keras.layers import Activation, Dropout, Flatten, Dense
from keras.layers.normalization import BatchNormalization
from keras import optimizers
from keras.models import load_model
import keras

X_val = np.load('pascalX_val.npy')
Y_val = np.load('pascaly_val.npy')

x = load_model('ePascalVOCClassifier.h5')
x.evaluate(x=X_val, y=Y_val)

X = np.load('pascalX.npy')
Y = np.load('pascaly.npy')

# original parameters (lr=0.001, decay=1e-6, momentum=0.9, nesterov=True)
sgd = optimizers.SGD(lr=0.001, decay=1e-6, momentum=0.9, nesterov=True)

# original parameters (lr=0.02, beta_1=0.9, beta_2=0.999, epsilon=None, schedule_decay=0.004)
nadam = optimizers.Nadam(lr=0.02, beta_1=0.9, beta_2=0.999, epsilon=None, schedule_decay=0.004)

# original parameters (lr=0.001, beta_1=0.9, beta_2=0.999, epsilon=None, decay=0.0, amsgrad=False)
adam = optimizers.Adam(lr=0.001, beta_1=0.9, beta_2=0.999, epsilon=None, decay=0.0, amsgrad=False)

x.compile(loss='mean_squared_logarithmic_error',
              optimizer=sgd,
              metrics=['accuracy'])

for i in range(25):
  print("epoch",i+1)
  x.fit(X, Y,epochs=1,batch_size=25,validation_data=(X_val, Y_val))
  #x.save('ePascalVOCClassifier_epoch18aboveV_1_2.h5')
  print("----------------------------------------------------------------------")
  print("----------------------------------------------------------------------")

