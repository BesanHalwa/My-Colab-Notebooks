# -*- coding: utf-8 -*-
"""Test Gandu.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rPUTIMWmJFT1TX1x-uCQA-pbAZWxJsim
"""

!apt-get install -y -qq software-properties-common python-software-properties module-init-tools
!add-apt-repository -y ppa:alessandro-strada/ppa 2>&1 > /dev/null
!apt-get update -qq 2>&1 > /dev/null
!apt-get -y install -qq google-drive-ocamlfuse fuse
from google.colab import auth
auth.authenticate_user()
from oauth2client.client import GoogleCredentials
creds = GoogleCredentials.get_application_default()
import getpass
!google-drive-ocamlfuse -headless -id={creds.client_id} -secret={creds.client_secret} < /dev/null 2>&1 | grep URL
vcode = getpass.getpass()
!echo {vcode} | google-drive-ocamlfuse -headless -id={creds.client_id} -secret={creds.client_secret}

!mkdir -p drive
!google-drive-ocamlfuse drive

cd drive

ls

cd pascal_data

from keras.applications.vgg16 import VGG16
from keras.preprocessing import image
from keras.applications.vgg16 import preprocess_input
import numpy as np
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D
from keras.layers import Activation, Dropout, Flatten, Dense 
from keras.layers.normalization import BatchNormalization
from keras import optimizers
import keras

X = np.load('pascalX_val.npy')
Y = np.load('pascaly_val.npy')

print(X.shape)
print(Y.shape)

X = X/255

gandu = Sequential()

# Block 1
gandu.add(Conv2D(64, 3, 3,activation='relu',border_mode='same',name='Custom_block1_conv1',input_shape=(300,300,3)))
gandu.add(Conv2D(64, 3, 3,activation='relu',border_mode='same',name='block1_conv2',trainable=False))
gandu.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), name='block1_pool'))

# Block 2
gandu.add(Conv2D(128, 3, 3,
                      activation='relu',
                      border_mode='same',
                      name='block2_conv1',trainable=False))

gandu.add(Conv2D(128, 3, 3,
                      activation='relu',
                      border_mode='same',
                      name='block2_conv2',trainable=False))

gandu.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), name='block2_pool'))

# Block 3
gandu.add(Conv2D(256, 3, 3,
                      activation='relu',
                      border_mode='same',
                      name='block3_conv1',trainable=False))
gandu.add(Conv2D(256, 3, 3,
                      activation='relu',
                      border_mode='same',
                      name='block3_conv2',trainable=False))
gandu.add(Conv2D(256, 3, 3,
                      activation='relu',
                      border_mode='same',
                      name='block3_conv3',trainable=False))
gandu.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), name='block3_pool'))

# Block 4
gandu.add(Conv2D(512, 3, 3,
                      activation='relu',
                      border_mode='same',
                      name='block4_conv1',trainable=False))
gandu.add(Conv2D(512, 3, 3,
                      activation='relu',
                      border_mode='same',
                      name='block4_conv2',trainable=False))
gandu.add(Conv2D(512, 3, 3,
                      activation='relu',
                      border_mode='same',
                      name='block4_conv3',trainable=False))
gandu.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), name='block4_pool'))

# Block 5
gandu.add(Conv2D(512, 3, 3,
                      activation='relu',
                      border_mode='same',
                      name='block5_conv1',trainable=False))
gandu.add(Conv2D(512, 3, 3,
                      activation='relu',
                      border_mode='same',
                      name='block5_conv2',trainable=False))
gandu.add(Conv2D(512, 3, 3,
                      activation='relu',
                      border_mode='same',
                      name='block5_conv3',trainable=False))
gandu.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), name='block5_pool'))
gandu.add(MaxPooling2D((2, 2), strides=(2, 2)))

# Classification block
gandu.add(Flatten(name='flatten'))
gandu.add(Dense(4096, activation='relu', name='x_fc1'))
#gandu.add(Dense(4096, activation='relu', name='fc2'))
gandu.add(Dense(400, activation='relu', name='f_c2'))
gandu.add(Dense(20, activation='softmax', name='coustom_predictions'))

gandu.load_weights('gandu_weights13.h5')

k = np.zeros((1,300,300,3))

k[0] = X[56]

gandu.predict(k)

Y[56]

import matplotlib

matplotlib.pyplot.imshow(X[56])

import cv2
alia = cv2.imread("testimagekk.jpg")
alia = cv2.resize(alia, (300, 300)) 
k[0] = alia / 255

gandu.predict(k)

matplotlib.pyplot.imshow(k[0])

